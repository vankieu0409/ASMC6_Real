@implements IDisposable
<MudDrawerHeader>
    <MudText Typo="Typo.h6">Settings</MudText>
</MudDrawerHeader>
<MudNavMenu>
    <MudNavLink Href="#" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AccountBox">Profile</MudNavLink>
    <AuthorizeView Roles="Adminnitrator">

    </AuthorizeView>
    @*@if (@badgeContent != null)
    {*@<MudBadge Origin="Origin.CenterRight" Content="@badgeContent" Color="Color.Error" Overlap="false" Dot="false" Bordered="true">
        <MudNavLink Href="/cart" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCart">
            Giỏ hàng     
        </MudNavLink>
    </MudBadge>
    @*  }
    else
    {
    <MudNavLink Href="/cart" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCart">Giỏ hàng</MudNavLink>
    }*@
    <MudNavLink Href="#" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.History">Order History</MudNavLink>
    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" OnClick="BeginSignOut">Đăng xuất</MudNavLink>
</MudNavMenu>

@code {
    public int? badgeContent { get; set; }

    private async Task BeginSignOut(MouseEventArgs e)
    {
        var checkLogout = await _authentication.LogoutService();
        if (checkLogout) _navigationManager.NavigateTo("/", true);
        else await _jsRuntime.InvokeVoidAsync("alert", "Đăng không xuất thành công!");

    }
    private int GetCartItemsCount()
    {
        return _localStorageSync.GetItem<int>("cartItemsCount");
    }

    protected override void OnInitialized()
    {
        _cartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        while (true)
        {
    // Lấy số lượng sản phẩm trong giỏ hàng
            badgeContent = GetCartItemsCount();

    // Cập nhật badge content
            await InvokeAsync(() => { StateHasChanged(); });

    // Đợi 1 giây trước khi cập nhật lại badge content
            await Task.Delay(1000);
        }
    }

    //private async Task<int> GetCartItemsCount()
    //{
    //    var count = await _cartService.GetCartItemsCount();
    //    return count;
    //}

}
