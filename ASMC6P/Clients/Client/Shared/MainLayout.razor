@using MudBlazor.Utilities
@inherits LayoutComponentBase
@using ASMC6P.Client.Pages
@using ASMC6P.Shared.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="24" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <AuthorizeView>
            <Authorized>
               
                <MudSpacer />
                <MudExpansionPanels>
                    <MudMenu>
                        <ActivatorContent>
                            <MudAvatar Color="Color.Warning" Image="@userDto.Image" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Href="user{Id}">Profile</MudMenuItem>
                            <MudMenuItem>Usage</MudMenuItem>
                            <MudMenuItem OnClick="BeginSignOut">Sign Out</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </MudExpansionPanels>
            </Authorized>
            <NotAuthorized>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Login" OnClick="Login" Edge="Edge.End">Login</MudIconButton>
            </NotAuthorized>
        </AuthorizeView>
        <MudToggleIconButton Toggled="@_isDarkMode" ToggledChanged="OnToggledChanged"
                             Icon="@Icons.Material.Outlined.LightMode" Color="@Color.Inherit" Title="Default"
                             ToggledIcon="@Icons.Material.Outlined.DarkMode" ToggledColor="@Color.Dark" ToggledTitle="Dark" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Never" Breakpoint="Breakpoint.Sm" Elevation="24" Variant="@DrawerVariant.Persistent" OpenMiniOnHover="false">
        <NavMenuCategory/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    UserDto userDto = new UserDto();
    bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        _isDarkMode = toggled;
    }

    //protected  override async void OnInitialized()
    //{
    //    //userDto = await _localStorage.GetItemAsync<UserDto>("user");
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        userDto = await _localStorage.GetItemAsync<UserDto>("user");
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void ToggleRightDrawer()
    {
        
    }
    private async Task BeginSignOut(MouseEventArgs args)
    {
        var checkLogout = await _authentication.LogoutService();
        if (checkLogout) _navigationManager.NavigateTo("/", true);
        else await _jsRuntime.InvokeVoidAsync("alert", "Đăng không xuất thành công!");

    }

    void Login()
    {
        _navigationManager.NavigateTo("/login");
    }
}
